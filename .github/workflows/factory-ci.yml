name: Private Cloud Factory CI
on:
  schedule:
    - cron: '0 7,15 * * *'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  TEST_ORG_NAME: wm-private-cloud-test
  TEST_REPO_NAME: factory-test-${{ github.run_number }}
  DEPLOYMENT_RELEASE_NAME: factory-test-${{ github.run_number }}
jobs:
  create-private-cloud-repository:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Get GitHub App Token
        id: action-github-app-token
        uses: actions/create-github-app-token@v1.9.3
        with:
          app-id: ${{ secrets.FACTORY_TEST_APP_ID }}
          private-key: ${{ secrets.FACTORY_TEST_APP_PEM }}
          github-api-url: "https://api.github.com"
          owner: "${{ env.TEST_ORG_NAME }}"
          repositories: "private-cloud-factory-test"
          
      - name: Create Repository from Factory Template
        run: |
          curl -L -f \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.action-github-app-token.outputs.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/wm-private-cloud/private-cloud-factory/generate \
          -d '{"owner":"${{ env.TEST_ORG_NAME }}","name":"${{ env.TEST_REPO_NAME }}","description":"Test Factory Repository","include_all_branches":false,"private":false}'

      
  trigger-cicd-worfklow:
    runs-on: ubuntu-latest
    needs: create-private-cloud-repository
    strategy:
      matrix: # Ensure idempotent execution by running the workflow 2 times with the same data. In this case the second run should just update the deployment and finish successfully, too
        workflow-run-index: [0, 1]
      max-parallel: 1 # Ensure the runs are sequential even if there is more than one runner available
    steps:
      - name: Get GitHub App Token
        id: action-github-app-token-test-repo
        uses: actions/create-github-app-token@v1.9.3
        with:
          app-id: ${{ secrets.FACTORY_TEST_APP_ID }}
          private-key: ${{ secrets.FACTORY_TEST_APP_PEM }}
          github-api-url: "https://api.github.com"
          owner: "${{ env.TEST_ORG_NAME }}"
          repositories: "${{ env.TEST_REPO_NAME }}"
          
      - name: Trigger CI/CD Workflow
        run: |
          # For now just wait 50 seconds to have GitHub properly setup the repository. Improve by adding polling 
          sleep 50
          curl -L -f \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.action-github-app-token-test-repo.outputs.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ env.TEST_ORG_NAME }}/${{ env.TEST_REPO_NAME }}/actions/workflows/cicd.yml/dispatches \
          -d '{"ref":"main","inputs":{"wmPackages":"WmJDBCAdapter","customPackages":"Fibonacci","customPackagesOrgUrl":"https://github.com/wm-private-cloud-test","deploymentReleaseName":"${{ env.DEPLOYMENT_RELEASE_NAME }}"}}'
      
      - name: Wait for Workflow Completion
        run: |
          url="https://api.github.com/repos/${{ env.TEST_ORG_NAME }}/${{ env.TEST_REPO_NAME }}/actions/runs"
          interval=10
          timeout=$((30 * 60))
          startTime=$SECONDS
          
          while true; do
              elapsedTime=$((SECONDS - startTime))
              if [ "$elapsedTime" -ge "$timeout" ]; then
                  echo "Timeout reached after $((elapsedTime / 60)) minutes. Exiting with status 1."
                  exit 1
              fi
              response=$(curl -L -f -X GET -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ steps.action-github-app-token-test-repo.outputs.token }}" -H "X-GitHub-Api-Version: 2022-11-28" "$url")
              status=$(echo "$response" | jq -r '.workflow_runs[${{ matrix.workflow-run-index }}].status // empty')
              conclusion=$(echo "$response" | jq -r '.workflow_runs[${{ matrix.workflow-run-index }}].conclusion // empty')
              if [ "$status" == "completed" ]; then
                  echo "Status is completed for the ${{ matrix.workflow-run-index }} workflow run."
                  if [ "$conclusion" == "success" ]; then
                      echo "Conclusion is success. Exiting with status 0."
                      exit 0
                  else
                      echo "Conclusion is $conclusion. Exiting with status 1."
                      exit 1
                  fi
              fi
              echo "Status is $status for the ${{ matrix.workflow-run-index }} workflow run. Retrying in $interval seconds..."
              sleep "$interval"
          done

  verify-successful-deployment:
    runs-on: ubuntu-latest
    needs: trigger-cicd-worfklow
    env:
      KUBECONFIG: ${{ github.workspace }}/${{ github.run_number }}-kubeconf
    steps:
      - name: Authenticate against Kubernetes cluster
        run: echo "${{ secrets.KUBE_CONFIG }}" > ${KUBECONFIG}
        
      - name: Check deployment status
        run: |
          (helm status ${{ env.DEPLOYMENT_RELEASE_NAME }} | grep "STATUS: deployed") && echo Successful verification || (echo Verification failed - deployment status is not "deployed" && exit 1)
     
      - name: Cleanup deployment
        if: always()
        run: helm uninstall ${{ env.DEPLOYMENT_RELEASE_NAME }} || true
        
      - name: Cleanup runner
        if: always()
        run: rm -rf ${KUBECONFIG}
        
  cleanup-private-cloud-repository:
    if: always() #TODO: For now always delete, then delete only on success
    runs-on: ubuntu-latest
    needs: verify-successful-deployment
    steps:
      - name: Get GitHub App Token
        id: action-github-app-token-test-repo
        uses: actions/create-github-app-token@v1.9.3
        with:
          app-id: ${{ secrets.FACTORY_TEST_APP_ID }}
          private-key: ${{ secrets.FACTORY_TEST_APP_PEM }}
          github-api-url: "https://api.github.com"
          owner: "${{ env.TEST_ORG_NAME }}"
          repositories: "${{ env.TEST_REPO_NAME }}"
          
      - name: Delete Repository
        run: |
          curl -L -f \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.action-github-app-token-test-repo.outputs.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ env.TEST_ORG_NAME }}/${{ env.TEST_REPO_NAME }} 
 
  notify-on-failure:
    if: failure()
    runs-on: ubuntu-latest
    needs: cleanup-private-cloud-repository
    steps:
      - name: Notify
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "[FAILURE] Private Cloud Factory Test"
          notification-color: d60c36
          timezone: Europe/Sofia
          verbose-logging: true
